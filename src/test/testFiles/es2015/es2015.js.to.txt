"use strict";
var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {return value instanceof P ? value : new P(function (resolve) {resolve(value);});}
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {try {step(generator.next(value));} catch (e) {reject(e);}}
    function rejected(value) {try {step(generator["throw"](value));} catch (e) {reject(e);}}
    function step(result) {result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);}
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("@m1/a/b/c/dist/moduleA"));
const package_json_1 = __importDefault(require("@m1/a/b/c/dist"));
const transform_1 = __importDefault(require("./a/b/c/moduleB"));
const chalk_1 = __importDefault(require("chalk"));
commander_1.default.
version(package_json_1.default.version).
description(`${package_json_1.default.description}
  <src>: The source directory / file that contains typescript build result.
  [dst]: Optional. The destination directory / file. If not provided, output will replace the <src>.`).
arguments("<src> [dst]").
option("-p, --mappingConfigPath <packageJsonPath>", "Optional. Specify the mapping config json file location. \nBy default, will use the package.json in current working directory.").
action((src, dst, program) => __awaiter(void 0, void 0, void 0, function* () {
  try {
    yield transform_1.default(src, dst, program.mappingConfigPath);
  }
  catch (e) {
    console.log(chalk_1.default.red(`Error: ${e}`));
  }
})).
parse(process.argv);
if (!process.argv.slice(2).length) {
  commander_1.default.help();
}